using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Mastermind
{
    class CodeBreaker
    {
        CodeColours[] aiGuess;
        //List of lists of CodeColours for combinations, nested list
        List<List<CodeColours>> comboList;
        List<CodeColours> comboSubList;
        CodeColours[] previousGuesses;
        AnswerColours[] previousAnswer;

        int turnNum, numPegs, numColours;
        Random rnd;

        /// <summary>
        /// Constructor for the class, called from the Game class when the user chooses a AIvsAI gamemode
        /// Initialises a number of arrays and lists using passed parameter values to set array lengths
        /// Also calls the GenerateCombos method
        /// </summary>
        /// <param name="random">The random seed generated within the Game class</param>
        /// <param name="numberOfPegs"></param>
        /// <param name="numberOfColours"></param>
        public CodeBreaker(Random random, int numberOfPegs, int numberOfColours)
        {
            aiGuess = new CodeColours[numberOfPegs];
            previousGuesses = new CodeColours[numberOfPegs];
            previousAnswer = new AnswerColours[numberOfPegs];
            comboList = new List<List<CodeColours>>();

            numPegs = numberOfPegs;
            numColours = numberOfColours;

            GenerateCombos();

            turnNum = 0;
            rnd = random;
        }

        /// <summary>
        /// Called by the Game class, allows the AI to take a guess at the answer code
        /// </summary>
        /// <returns>Returns the AI's guess as an array of CodeColours</returns>
        public CodeColours[] TakeTurn()
        {
            //For the first turn the AI will randomly generate a guess by looping through the guess array and for each entry chooses a random number between 1 and the numColours
            //Then gets the CodeColours value assigned to the generated number
            if (turnNum == 0)
            {
                for (int i = 0; i < aiGuess.Length; i++)
                {
                    int randomNum = rnd.Next(1, numColours);
                    aiGuess[i] = (CodeColours)randomNum;
                }
            }
            //After the first turn the AI will use the first entry within the comboList list
            else
            {
                for (int i = 0; i < aiGuess.Length; i++)
                {
                    aiGuess[i] = comboList[0][i];
                }
            }

            turnNum++;
            return aiGuess;
        }

        /// <summary>
        /// Called after the AI has made its guess and the CodeMaker has generated the response
        /// Loops through the comboList and compares each entry againt the AI guess for this turn in a similar manner to the CheckGuess nethod within CodeMaker class
        /// If the produced result does not have the same number of black and white pegs then that entry is removed from the comboList
        /// This eliminates all colour code combinations that cannot possibly be correct
        /// </summary>
        /// <param name="answersArray">The guess response generated by the CheckGuess method in the CodeMaker class</param>
        public void CheckRemainingCombos(AnswerColours[] answersArray)
        {
            List<CodeColours> previousGuess, thisCombo;
            List<int> indexesToRemove = new List<int>(), blackPegIndexes;
            int numWhite, numBlack, targetWhite = 0, targetBlack = 0, numRemoved = 0;
            bool removedFromList;

            //Goes through the parameter array to get the target number of black and white pegs the comboList entries need to hit
            for (int i = 0; i < answersArray.Length; i++)
            {
                if (answersArray[i] == AnswerColours.B)
                {
                    targetBlack++;
                }
                else if (answersArray[i] == AnswerColours.W)
                {
                    targetWhite++;
                }
            }

            //Method for checking the entries very similar to the CheckGuess method within the CodeMaker class
            //Main difference being when a black or white peg match is found the numWhite or numBlack integers are incremented instead of being added to a response array
            for (int i = 0; i < comboList.Count; i++)
            {
                previousGuess = new List<CodeColours>();
                thisCombo = new List<CodeColours>();
                blackPegIndexes = new List<int>();
                numRemoved = 0;
                numWhite = 0;
                numBlack = 0;

                for (int x = 0; x < aiGuess.Length; x++)
                {
                    previousGuess.Add(aiGuess[x]);
                    thisCombo.Add(comboList[i][x]);
                }

                for (int x = 0; x < thisCombo.Count; x++)
                {
                    for (int y = 0; y < previousGuess.Count; y++)
                    {
                        if (thisCombo[x] == previousGuess[y] && x == y)
                        {
                            blackPegIndexes.Add(y);
                            numBlack++;
                            break;
                        }
                    }
                }

                for (int x = 0; x < blackPegIndexes.Count; x++)
                {
                    thisCombo.RemoveAt(blackPegIndexes[x] - numRemoved);
                    previousGuess.RemoveAt(blackPegIndexes[x] - numRemoved);
                    numRemoved++;
                }

                do
                {
                    removedFromList = false;
                    for (int x = 0; x < thisCombo.Count; x++)
                    {
                        for (int y = 0; y < previousGuess.Count; y++)
                        {
                            if (thisCombo[x] == previousGuess[y])
                            {
                                thisCombo.RemoveAt(x);
                                previousGuess.RemoveAt(y);

                                numWhite++;
                                removedFromList = true;
                                break;
                            }
                        }
                        if (removedFromList) break;
                    }
                }
                while (removedFromList);

                //If the number of black and white pegs do not match the target numbers then the index of the comboList entry is added to a list of integers
                if (numWhite != targetWhite || numBlack != targetBlack)
                {
                    indexesToRemove.Add(i);
                }
            }

            //Lastly runs through the indexesToRemove list and removes the list entries within the comboList at the integers within the indexesToRemove list
            for (int i = indexesToRemove.Count - 1; i >= 0; i--)
            {
                comboSubList = new List<CodeColours>();

                comboSubList = comboList[indexesToRemove[i]];
                comboList.Remove(comboSubList);
            }
        }

        /// <summary>
        /// Called from the contructor before the AI makes its first guess
        /// Goes through a number of for loops depending on the number of pegs within the answer code from 1 to the number of colours used
        /// The corresponding CodeColours values for each int of each loop are then added to the comboList as a list of CodeColours
        /// This generates all possible coour combinations the AI can use; worked out with (numColours ^ numPegs)
        /// </summary>
        private void GenerateCombos()
        {
            for (int i = 1; i < numColours + 1; i++)
            {
                for (int x = 1; x < numColours + 1; x++)
                {
                    if (numPegs > 2)
                    {
                        for (int y = 1; y < numColours + 1; y++)
                        {
                            if (numPegs > 3)
                            {
                                for (int z = 1; z < numColours + 1; z++)
                                {
                                    if (numPegs > 4)
                                    {
                                        for (int w = 1; w < numColours + 1; w++)
                                        {
                                            if (numPegs > 5)
                                            {
                                                for (int k = 1; k < numColours + 1; k++)
                                                {
                                                    comboSubList = new List<CodeColours>
                                                    {
                                                        (CodeColours)i,
                                                        (CodeColours)x,
                                                        (CodeColours)y,
                                                        (CodeColours)z,
                                                        (CodeColours)w,
                                                        (CodeColours)k,
                                                    };

                                                    comboList.Add(comboSubList);
                                                }
                                            }
                                            else
                                            {
                                                comboSubList = new List<CodeColours>
                                                {
                                                    (CodeColours)i,
                                                    (CodeColours)x,
                                                    (CodeColours)y,
                                                    (CodeColours)z,
                                                    (CodeColours)w,
                                                };

                                                comboList.Add(comboSubList);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        comboSubList = new List<CodeColours>
                                        {
                                            (CodeColours)i,
                                            (CodeColours)x,
                                            (CodeColours)y,
                                            (CodeColours)z,
                                        };

                                        comboList.Add(comboSubList);
                                    }
                                }
                            }
                            else
                            {
                                comboSubList = new List<CodeColours>
                                {
                                    (CodeColours)i,
                                    (CodeColours)x,
                                    (CodeColours)y,
                                };

                                comboList.Add(comboSubList);
                            }
                        }
                    }
                    else
                    {
                        comboSubList = new List<CodeColours>
                        {
                            (CodeColours)i,
                            (CodeColours)x,
                        };

                        comboList.Add(comboSubList);
                    }
                }
            }
        }
    }
}
